package compute

# Parser for an array field exported from a Python PANDAS dataframe via its to_csv() method.
# The exported file is RFC 4180 compatible, and is loaded using the CSV loader from the golang
# standard lib.
#
# Example: "[10, 20, 30, \"forty  & fifty\"]"

# generated go struct - accessible via `p` in attached code blocks
type ComplexField Peg {
    arrayElements
}

ComplexField <- array !.

# non-terminals
array <- ws * obracket ws* (item ws* (comma ws* item ws* )*)? cbracket
item <- string / <value*> { p.addElement(buffer[begin:end]) }
string <- escaped_string / nonescaped_string
escaped_string <- escdquote <(textdata / squote / lf / cr / obracket / cbracket)*> escdquote { p.addElement(buffer[begin:end]) }
nonescaped_string <- squote <textdata*> squote { p.addElement(buffer[begin:end]) }

# terminals
ws <- ' '
comma <- ','
lf <- '\n'
cr <- '\r'
escdquote <- '\"'
squote <- '\''
obracket <- '['
cbracket <- ']'
value <- [a-zA-Z0-9]
textdata <- [a-zA-Z0-9 !#$&%()*+\-./:;<->?\\^_`{|}~]
